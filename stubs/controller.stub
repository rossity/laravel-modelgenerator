<?php

namespace App\Http\Controllers\Api;

use App\Http\Requests\Api\{{modelName}}Request;
use App\Http\Resources\{{modelName}}Resource;
use App\Http\Resources\{{modelName}}Collection;
use App\Http\Controllers\Controller;
use App\{{modelName}};
{{hasRelated}}use App\{{relatedModel}};{{/hasRelated}}
use Spatie\QueryBuilder\Filter;
use Spatie\QueryBuilder\QueryBuilder;
use Illuminate\Support\Facades\Auth;

class {{modelName}}Controller extends Controller
{
    public function index({{hasRelated}}{{relatedModel}} ${{relatedVariable}}{{/hasRelated}})
    {
        {{hasPolicy}}$this->authorize('view', ${{nameVariable}});{{/hasPolicy}}
        {{notRelated}}$query = {{modelName}}::class;{{/notRelated}}
        {{hasRelated}}$query = ${{relatedVariable}}->{{relation}}();{{/hasRelated}}

        ${{pluralNameVariable}} = QueryBuilder::for($query)
            ->allowedFilters({{allowedFilters}})
            ->latest()
            ->get();

        return (new {{modelName}}Collection(${{pluralNameVariable}}))->response(200);
    }

    public function store({{modelName}}Request $request{{hasRelated}}, {{relatedModel}} ${{relatedVariable}}{{/hasRelated}})
    {
        {{hasPolicy}}$this->authorize('create', {{modelName}}::class);{{/hasPolicy}}
        {{notRelated}}${{nameVariable}} = {{modelName}}::create($request->all());{{/notRelated}}
        {{hasRelated}}${{nameVariable}} = ${{relatedVariable}}->{{relation}}()->create($request->all());{{/hasRelated}}

        return (new {{modelName}}Resource(${{nameVariable}}))->response(201);
    }

    public function show({{modelName}} ${{nameVariable}})
    {
        {{hasPolicy}}$this->authorize('view', ${{nameVariable}});
        {{/hasPolicy}}
        return (new {{modelName}}Resource(${{nameVariable}}))->response(200);
    }

    public function update({{modelName}}Request $request, {{modelName}} ${{nameVariable}})
    {
        {{hasPolicy}}$this->authorize('update', ${{nameVariable}});
        {{/hasPolicy}}
        ${{nameVariable}}->update($request->all());

        return (new {{modelName}}Resource(${{nameVariable}}))->response(200);
    }

    public function destroy({{modelName}} ${{nameVariable}})
    {
        {{hasPolicy}}$this->authorize('delete', ${{nameVariable}});
        {{/hasPolicy}}
        ${{nameVariable}}->delete();

        return response()->json(null, 204);
    }
}
