<?php

namespace App\Http\Controllers\Api;

use App\Http\Requests\{{modelName}}Request;
use App\Http\Resources\{{modelName}}Resource;
use App\Http\Resources\{{modelName}}Collection;
use App\{{modelName}};
use Spatie\QueryBuilder\Filter;
use Spatie\QueryBuilder\QueryBuilder;
use Illuminate\Support\Facades\Auth;

class {{modelName}}Controller extends Controller
{
    public function index()
    {
        $query = Auth::user()->hasRole(['admin', 'moderator'])
            ? ({{modelName}}::class)
            : ({{modelName}}::where('user_id', Auth::id()));

        ${{pluralNameVariable}} = QueryBuilder::for($query)
            ->allowedFilters({{allowedFilters}})
            ->latest()
            ->get();

        return (new {{modelName}}Collection(${{pluralNameVariable}}))->response(200);
    }

    public function store({{modelName}}Request $request)
    {
        $this->authorize('create', {{modelName}}::class);

        ${{nameVariable}} = {{modelName}}::create($request->except(['id', 'user_id']));

        return (new {{modelName}}Resource(${{nameVariable}}))->response(201);
    }

    public function show({{modelName}} ${{nameVariable}})
    {
        $this->authorize('view', ${{nameVariable}});

        return (new {{modelName}}Resource(${{nameVariable}}))->response(200);
    }

    public function update({{modelName}}Request $request, {{modelName}} ${{nameVariable}})
    {
        $this->authorize('update', ${{nameVariable}});

        ${{nameVariable}}->update($request->except(['id', 'user_id']));

        return (new {{modelName}}Resource(${{nameVariable}}))->response(200);
    }

    public function destroy({{modelName}} ${{nameVariable}})
    {
        $this->authorize('delete', ${{nameVariable}});
        
        ${{nameVariable}}->delete();

        return response()->json(null, 204);
    }
}
